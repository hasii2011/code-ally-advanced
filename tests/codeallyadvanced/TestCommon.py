
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.Position import Position

from codeallybasic.UnitTestBase import UnitTestBase

from codeallyadvanced.ui.AttachmentSide import AttachmentSide
from codeallyadvanced.ui.Common import Common


class TestCommon(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo - Humberto A. Sanchez II
        Generated: 09 January 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testWeirdWest(self):

        sourcePosition:      Position = Position(x=700, y=250)
        destinationPosition: Position = Position(x=700, y=300)

        attachmentSide: AttachmentSide = Common.whereIsDestination(sourcePosition=sourcePosition, destinationPosition=destinationPosition)

        self.assertEqual(AttachmentSide.EAST, attachmentSide, 'Miscalculation')

    def testDestinationWest(self):
        sourcePosition:      Position = Position(x=500, y=100)
        destinationPosition: Position = Position(x=100, y=100)

        attachmentSide: AttachmentSide = Common.whereIsDestination(sourcePosition=sourcePosition, destinationPosition=destinationPosition)

        self.assertEqual(AttachmentSide.WEST, attachmentSide, 'Miscalculation')

    def testDestinationEast(self):
        sourcePosition:      Position = Position(x=100, y=100)
        destinationPosition: Position = Position(x=500, y=100)

        attachmentSide: AttachmentSide = Common.whereIsDestination(sourcePosition=sourcePosition, destinationPosition=destinationPosition)

        self.assertEqual(AttachmentSide.EAST, attachmentSide, 'Miscalculation')

    def testDestinationNorth(self):
        sourcePosition:      Position = Position(x=100, y=500)
        destinationPosition: Position = Position(x=100, y=100)

        attachmentSide: AttachmentSide = Common.whereIsDestination(sourcePosition=sourcePosition, destinationPosition=destinationPosition)

        self.assertEqual(AttachmentSide.NORTH, attachmentSide, 'Miscalculation')

    def testDestinationSouth(self):
        sourcePosition:      Position = Position(x=100, y=100)
        destinationPosition: Position = Position(x=100, y=500)

        attachmentSide: AttachmentSide = Common.whereIsDestination(sourcePosition=sourcePosition, destinationPosition=destinationPosition)

        self.assertEqual(AttachmentSide.SOUTH, attachmentSide, 'Miscalculation')

    def testDestinationNorthEast(self):
        sourcePosition:      Position = Position(x=500, y=500)
        destinationPosition: Position = Position(x=700, y=100)

        attachmentSide: AttachmentSide = Common.whereIsDestination(sourcePosition=sourcePosition, destinationPosition=destinationPosition)

        self.assertEqual(AttachmentSide.NORTH, attachmentSide, 'Miscalculation')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestCommon))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
